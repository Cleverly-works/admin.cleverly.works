"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5146],{14399:function(e,n,t){t.d(n,{cz:function(){return g},qd:function(){return S},nD:function(){return w},UH:function(){return x},SW:function(){return A},Qn:function(){return k},he:function(){return C},j$:function(){return P},_d:function(){return Z},kx:function(){return j},t1:function(){return G},by:function(){return F},yR:function(){return L},RJ:function(){return U},Cj:function(){return O},Ve:function(){return R},kU:function(){return T},kB:function(){return E}});var r,a,o,s,i,c,u,d,l,y,m,q,_,p,b,I,v,$,h=t(52209),f=t(54397),g=(0,f.Ps)(r||(r=(0,h.Z)(["\n  query GetAddressForSelect($q: String, $entity: String!, $entityId: Int!) {\n    items: Address(\n      where: {\n        Address_Entities: { entity: { _eq: $entity }, entityId: { _eq: $entityId } }\n        _or: [\n          { addressLine1: { _eq: $q } }\n          { addressLine2: { _eq: $q } }\n          { addressLine3: { _eq: $q } }\n          { county: { _eq: $q } }\n          { postCode: { _eq: $q } }\n          { city: { _eq: $q } }\n        ]\n      }\n    ) {\n      label: addressLine1\n      value: id\n      id\n      name\n      addressLine1\n      addressLine2\n      addressLine3\n      postCode\n      county\n      country: Country {\n        name\n      }\n      city\n      Address_Entities {\n        invoice\n      }\n    }\n  }\n"]))),S=(0,f.Ps)(a||(a=(0,h.Z)(["\n  query GetAccountsForSelect($q: String) {\n    items: Account(where: { name: { _ilike: $q } }, order_by: { name: asc }) {\n      label: name\n      value: id\n    }\n  }\n"]))),w=(0,f.Ps)(o||(o=(0,h.Z)(['\n  query GetTaxonomy($q: String, $id: Int) {\n    items: Taxonomy(\n      where: { type: { _eq: "assetCategory" }, status: { _eq: "active" } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      options: Taxonomies(\n        where: {\n          type: { _eq: "assetCategory" }\n          name: { _ilike: $q }\n          id: { _eq: $id }\n          status: { _eq: "active" }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),x=(0,f.Ps)(s||(s=(0,h.Z)(["\n  query GetAssetsForSelect($locationId: Int, $q: String, $categoryId: Int, $bookable: String) {\n    items: Asset(\n      where: {\n        categoryId: { _eq: $categoryId }\n        locationId: { _eq: $locationId }\n        name: { _ilike: $q }\n        bookable: { _eq: $bookable }\n      }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n      parent: ParentAsset {\n        id\n        name\n      }\n      media: Media {\n        id\n        item: Medium {\n          id\n          name\n          filename\n          meta\n          category\n          type\n        }\n      }\n    }\n  }\n"]))),A=(0,f.Ps)(i||(i=(0,h.Z)(['\n  query GetCustomersForSelect($q: String) {\n    items: Account(\n      where: { name: { _ilike: $q }, type: { _eq: "customer" } }\n      order_by: { name: asc }\n    ) {\n      admin: Admins {\n        id: adminId\n      }\n      label: name\n      spendThreshold: meta(path: "$.finance.spendThreshold")\n      serviceRateLabour: meta(path: "$.finance.serviceRateLabour")\n      serviceRateExpenses: meta(path: "$.finance.serviceRateExpenses")\n      value: id\n    }\n  }\n']))),k=(0,f.Ps)(c||(c=(0,h.Z)(["\n  query GetJobsForSelect($_q: Int, $locationId: Int) {\n    items: Job(\n      where: {\n        Location: { id: { _eq: $locationId } }\n        _or: [{ id: { _eq: $_q } }, { Invoices: { id: { _eq: $_q } } }]\n      }\n      order_by: { title: asc }\n    ) {\n      label: label\n      value: id\n      number\n      createdAt\n      description\n      status\n      timingStart\n      title\n      type\n      Location {\n        name\n      }\n      Taxonomy {\n        Taxonomy {\n          shortJobDescription: name\n        }\n      }\n    }\n  }\n"]))),C=(0,f.Ps)(u||(u=(0,h.Z)(['\n  query GetManagersForSelect($accountId: Int!, $q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          role: { _in: ["owner", "manager"] }\n          status: { _eq: "active" }\n          Account: { id: { _eq: $accountId } }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n    }\n  }\n']))),P=(0,f.Ps)(d||(d=(0,h.Z)(["\n  query GetPostCodeAreaForSelect($countryId: Int, $q: String) {\n    items: PostcodeArea(\n      where: { name: { _ilike: $q }, countryId: { _eq: $countryId } }\n      order_by: { name: asc }\n    ) {\n      area\n      label: name\n      value: id\n    }\n  }\n"]))),Z=(0,f.Ps)(l||(l=(0,h.Z)(["\n  query GetPropertiesForSelect($where: Location_bool_exp) {\n    items: Location(where: $where, order_by: { name: asc }) {\n      label: name\n      value: id\n      access\n      registeredAddress: Addresses(where: { registered: { _eq: true } }) {\n        address: Address {\n          id\n          addressLine1\n          addressLine2\n          addressLine3\n          county\n          country: Country {\n            name\n          }\n          postCode\n          city\n        }\n      }\n    }\n  }\n"]))),j=(0,f.Ps)(y||(y=(0,h.Z)(['\n  query GetServicesForSelect($q: String) {\n    items: Service(\n      where: { name: { _ilike: $q }, status: { _eq: "active" } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n']))),G=(0,f.Ps)(m||(m=(0,h.Z)(["\n  query GetSlasForSelect($q: String, $adminId: Int, $type: String) {\n    items: SLA(\n      where: { name: { _ilike: $q }, type: { _eq: $type }, adminId: { _eq: $adminId } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),F=(0,f.Ps)(q||(q=(0,h.Z)(["\n  query GetSuppliersForSelect($where: Account_bool_exp) {\n    items: Account(where: $where, order_by: { name: asc }) {\n      label: name\n      value: id\n    }\n  }\n"]))),L=(0,f.Ps)(_||(_=(0,h.Z)(['\n  query GetUsersForSelect($accountId: Int, $q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        Account_Users: {\n          accountId: { _eq: $accountId }\n          isContact: { _eq: true }\n          status: { _eq: "active" }\n        }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']))),U=(0,f.Ps)(p||(p=(0,h.Z)(['\n  query GetUsersForSelect($q: String) {\n    items: User(\n      where: {\n        status: { _eq: "active" }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n      }\n      order_by: { nameFirst: asc }\n    ) {\n      label: fullName\n      value: id\n      email\n      phone\n    }\n  }\n']))),O=(0,f.Ps)(b||(b=(0,h.Z)(["\n  query GetTaxonomyGroupForSelect($q: String, $type: String!) {\n    items: Taxonomy(\n      where: { isGroup: { _eq: true }, name: { _ilike: $q }, type: { _eq: $type } }\n      order_by: { name: asc }\n    ) {\n      label: name\n      value: id\n    }\n  }\n"]))),R=(0,f.Ps)(I||(I=(0,h.Z)(['\n  query GetTaxonomy($q: String) {\n    items: Taxonomy(where: { type: { _eq: "expenseCategoryGroup" } }, order_by: { name: asc }) {\n      label: name\n      options: Taxonomies(\n        where: { type: { _eq: "expenseCategory" }, name: { _ilike: $q } }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),T=(0,f.Ps)(v||(v=(0,h.Z)(['\n  query GetCompliancesForSelect($q: String, $locationId: Int) {\n    items: Taxonomy(where: { type: { _eq: "complianceCategory" } }, order_by: { name: asc }) {\n      label: name\n      options: Compliances(\n        where: {\n          name: { _ilike: $q }\n          Compliance_Entities: { Location: { id: { _eq: $locationId } } }\n        }\n        order_by: { name: asc }\n      ) {\n        value: id\n        label: name\n      }\n    }\n  }\n']))),E=(0,f.Ps)($||($=(0,h.Z)(["\n  query GetUserRole($userId: Int!, $accountId: Int!) {\n    accountUsers: Account_User(\n      where: { userId: { _eq: $userId }, accountId: { _eq: $accountId } }\n    ) {\n      role\n    }\n  }\n"])))},95146:function(e,n,t){t.d(n,{P:function(){return w}});var r=t(92809),a=t(30266),o=t(10219),s=t(64687),i=t.n(s),c=t(67294),u=t(24237),d=t(26075),l=t(14399),y=t(80880),m=t(42593),q=t(65375),_=t(78215),p=t(2356),b=t(93515),I=t(14347),v=t(85893),$=["AddForm","accountId","area","assetCategoryId","control","entity","entityId","errors","id","isClearable","isDisabled","label","locationId","name","serviceId","taxonomyGroupType","customerId","customerRole","type","userId"];function h(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?h(Object(t),!0).forEach((function(n){(0,r.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):h(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var g=function(e,n){var t,r,a=!0;return(null===(t=e.errors[e.name])||void 0===t?void 0:t.message)!==(null===(r=n.errors[n.name])||void 0===r?void 0:r.message)&&(a=!1),["accountId","assetCategoryId","entity","entityId","locationId","serviceId","type","value","customerId","customerRole"].forEach((function(t){e[t]!==n[t]&&(a=!1)})),a},S=function(e){var n=e.accountId,t=e.area,r=e.assetCategoryId,a=e.entity,o=e.entityId,s=(e.hasRole,e.id),i=e.locationId,c=e.serviceId,u=e.taxonomyGroupType,d=e.customerId,y=e.customerRole,m=e.type,q=e.userId,_=m;switch(y&&(_="".concat(m,"_").concat(y)),_){case"address":return{query:l.cz,variables:{entity:a,entityId:o}};case"asset":return{query:l.UH,variables:{categoryId:r,locationId:i}};case"assetBookable":return{query:l.UH,variables:{categoryId:r,locationId:i,bookable:"yes"}};case"assetCategory":return{query:l.nD,variables:{id:s}};case"compliance":return{query:l.kU,variables:{locationId:i}};case"coverage":return{query:l.j$};case"customer":return{query:l.SW};case"job":return{query:l.Qn,variables:{locationId:i}};case"manager":return{query:l.he,variables:{accountId:n}};case"product":return{query:l.UH,variables:{category:"product",locationId:i}};case"property":return{query:l._d,variables:{where:{status:{_eq:"active"},Account_Locations:{accountId:{_eq:n}}}}};case"property_user":return{query:l._d,variables:{where:{status:{_eq:"active"},Account_Locations:{accountId:{_eq:n},Account:{type:{_eq:"customer"},Account_Users:{role:{_eq:"user"},userId:{_eq:d}}},User_Account_Locations:{Account_User:{userId:{_eq:d},accountId:{_eq:n}}}}}}};case"sensor":return{query:l.UH,variables:{category:"sensor",locationId:i}};case"service":return{query:l.kx};case"sla":return{query:l.t1,variables:{type:"priority",adminId:n}};case"sublocation":return{query:l.UH,variables:{category:"sublocation",adminId:n,locationId:i}};case"supplier":var p={type:{_eq:"supplier"}};return t&&(p.PostcodeAreas={PostcodeArea:{area:{_eq:t}},status:{_eq:"active"}}),c&&(p.Services={serviceId:{_eq:c},status:{_eq:"active"}}),{query:l.by,variables:{where:p}};case"user":return{query:l.yR,variables:{accountId:n}};case"usersForBookings":return{query:l.yR,variables:{accountId:q}};case"tenant":return{query:l.RJ};case"taxonomyGroup":return{query:l.Cj,variables:{type:u}};case"expenseCategory":return{query:l.Ve};default:return{query:l.qd}}},w=(0,c.memo)((function(e){var n=e.AddForm,t=e.accountId,r=e.area,s=e.assetCategoryId,u=e.control,l=e.entity,h=e.entityId,g=e.errors,w=e.id,A=e.isClearable,k=e.isDisabled,C=e.label,P=e.locationId,Z=e.name,j=e.serviceId,G=e.taxonomyGroupType,F=e.customerId,L=e.customerRole,U=e.type,O=e.userId,R=(0,o.Z)(e,$),T=(0,d.x)(),E=(0,c.useState)(!1),D=E[0],H=E[1],N=(0,c.useState)(),B=N[0],J=N[1],z=(0,c.useState)(!1),M=z[0],V=z[1],W=(0,c.useContext)(y.Z),Q=(0,c.useContext)(m.Z).hasRole,K=(0,c.useState)(!1),X=K[0],Y=K[1];(0,c.useEffect)((function(){return Y(!1),V(!1),function(){}}),[t,s,l,h,P,j,U,F,L,O]);var ee=function(){var e=(0,a.Z)(i().mark((function e(){var n,a,o,c,u,d,y;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!M){e.next=3;break}return Y(!0),e.abrupt("return",null);case 3:return H(!0),n=S({accountId:t,area:r,assetCategoryId:s,entity:l,entityId:h,hasRole:Q,id:w,locationId:P,serviceId:j,taxonomyGroupType:G,customerId:F,customerRole:L,type:U,userId:O}),a=n.query,o=n.variables,c=void 0===o?{}:o,e.next=7,T.query({query:a,variables:f({},c)});case 7:u=e.sent,d=u.data,y=(d=void 0===d?{items:[]}:d).items,J(y),H(!1),V(!0),Y(!0);case 15:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();return(0,v.jsx)(q.Z,{id:Z,label:C,children:(0,v.jsxs)(_.Z,{children:[(0,v.jsx)(p.Z,{md:n?11:12,children:(0,v.jsx)(b.Z,f({autoload:!1,blurInputOnSelect:!0,cacheOptions:!0,control:u,errors:g,isDisabled:k,isClearable:A,isLoading:D,menuIsOpen:X,options:B,onFocus:ee,onBlur:function(){Y(!1)},name:Z,searchable:!0},R),R.defaultValue)}),n&&(0,v.jsx)(p.Z,{md:1,children:(0,v.jsx)(x,{children:(0,v.jsx)(I.Z,{content:null,startIcon:"plus",size:"sm",onClick:function(){W.show({content:(0,v.jsx)("div",{children:(0,v.jsx)(n,{})}),title:"Add form"})}})})})]})})}),g),x=u.ZP.div.withConfig({displayName:"select__ButtonWrapper",componentId:"sc-v7qj9m-0"})(["position:relative;right:25px;top:2px;"]);w.defaultProps={isClearable:!0,label:"Account",name:"account",type:"account"}}}]);