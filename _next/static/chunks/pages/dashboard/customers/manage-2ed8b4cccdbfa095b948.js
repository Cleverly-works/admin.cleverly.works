(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6982],{53197:function(n,e,t){"use strict";t.d(e,{kJ:function(){return _},UB:function(){return p},rM:function(){return l},Ve:function(){return $},Wn:function(){return g},bD:function(){return f},G5:function(){return b}});var a,r,s,i,c,o,u,d=t(52209),m=t(54397),_=(0,m.Ps)(a||(a=(0,d.Z)(['\n  query GetCustomers(\n    $assignedUser: Int\n    $date: timestamptz\n    $limit: Int\n    $offset: Int\n    $q: String\n    $orderBy: Account_order_by!\n    $status: String\n  ) {\n    customers: Account(\n      limit: $limit\n      offset: $offset\n      where: {\n        type: { _eq: "customer" }\n        createdAt: { _eq: $date }\n        managerId: { _eq: $assignedUser }\n        name: { _ilike: $q }\n        status: { _eq: $status }\n      }\n      order_by: [$orderBy]\n    ) {\n      id\n      createdAt\n      name\n      companyNumber\n      vatId\n      website\n      status\n      addresses: Addresses(where: { entity: { _eq: "Account" } }) {\n        id\n        registered\n        operating\n        trading\n        invoice\n        status\n        createdAt\n        address: Address {\n          id\n          name\n          addressLine1\n          addressLine2\n          addressLine3\n          city\n          county\n          geo\n          postCode\n          country: Country {\n            id\n            name\n          }\n        }\n      }\n      locations: Account_Locations {\n        id\n      }\n      finance: Financial {\n        id\n        invoicing\n        serviceRate\n        stripeId\n        totalRevenue\n        unpaidInvoices\n        creditLimit\n        creditRating\n        createdAt\n        amountOutstanding\n        accountId\n        approvalThreshold\n        arrangementFee\n        spendThreshold\n        defaultPaymentMethod\n      }\n      manager: Manager {\n        id\n        nameFirst\n        nameLast\n      }\n      contactUsers: Account_Users(where: { isContact: { _eq: true } }) {\n        id\n        role\n        position\n        isContact\n        lastSignInAt\n        userId\n        user: User {\n          id\n          name: nameFirst\n          nameFirst\n          nameLast\n          phone\n          status\n          email\n          createdAt\n          fullName\n          accounts: Account_Users {\n            id\n            role\n            position\n            isContact\n            status\n            account: Account {\n              id\n              name\n              type\n            }\n          }\n        }\n      }\n    }\n    meta: Account_aggregate(\n      where: {\n        type: { _eq: "customer" }\n        createdAt: { _eq: $date }\n        managerId: { _eq: $assignedUser }\n        name: { _ilike: $q }\n        status: { _eq: $status }\n      }\n    ) {\n      aggregate {\n        totalCount: count\n      }\n    }\n  }\n']))),p=(0,m.Ps)(r||(r=(0,d.Z)(['\n  query GetCustomer($id: Int!) {\n    customer: Account_by_pk(id: $id) {\n      id\n      name\n      clientType: ClientType {\n        id\n        name\n      }\n      structure\n      companyNumber\n      vatId\n      website\n      status\n      createdAt\n      updatedAt\n      status\n      type\n      meta\n      usersMeta: Account_Users_aggregate {\n        aggregate {\n          count\n        }\n      }\n      propertiesMeta: Account_Locations_aggregate {\n        aggregate {\n          count\n        }\n      }\n      jobsMeta: CustomerJobs_aggregate {\n        aggregate {\n          count\n        }\n      }\n      addresses: Addresses(where: { entity: { _eq: "Account" } }) {\n        id\n        registered\n        operating\n        trading\n        invoice\n        status\n        createdAt\n        address: Address {\n          id\n          name\n          addressLine1\n          addressLine2\n          addressLine3\n          city\n          county\n          geo\n          postCode\n          country: Country {\n            id\n            name\n          }\n        }\n      }\n      manager: Manager {\n        id\n        nameFirst\n        nameLast\n        phone\n        email\n      }\n      contactUsers: Account_Users(where: { isContact: { _eq: true } }) {\n        id\n        role\n        position\n        isContact\n        lastSignInAt\n        userId\n        user: User {\n          id\n          name: nameFirst\n          nameFirst\n          nameLast\n          phone\n          status\n          email\n          createdAt\n          fullName\n          accounts: Account_Users {\n            id\n            role\n            position\n            isContact\n            status\n            account: Account {\n              id\n              name\n              type\n            }\n          }\n        }\n      }\n      bankAccounts: BankAccounts {\n        id\n        stripeId\n        accountNumber\n        routingNumber\n        bic\n        iban\n        status\n        default\n        createdAt\n      }\n      media: Media {\n        id\n        medium: Medium {\n          id\n          category\n          filename\n          meta\n          type\n        }\n      }\n      cards: Cards {\n        id\n        stripeId\n        type\n        last4\n        expYear\n        expMonth\n        status\n        default\n        createdAt\n      }\n      jobs: CustomerJobs {\n        id\n        title\n      }\n      finance: Financial {\n        id\n        invoicing\n        serviceRate\n        stripeId\n        totalRevenue\n        unpaidInvoices\n        creditLimit\n        creditRating\n        createdAt\n        amountOutstanding\n        accountId\n        approvalThreshold\n        arrangementFee\n        spendThreshold\n        defaultPaymentMethod\n      }\n      accountEntries: AccountEntries(order_by: { createdAt: asc }) {\n        id\n        outstandingAmount\n        type\n        entryId\n        currencyId\n        createdAt\n        balance\n        amount\n        accountId\n        updatedAt\n      }\n    }\n  }\n']))),l=(0,m.Ps)(s||(s=(0,d.Z)(["\n  query GetCustomerManage($id: Int!) {\n    customer: Account_by_pk(id: $id) {\n      id\n      name\n      website\n      companyNumber\n      vatId\n      contactUsers: Account_Users(where: { isContact: { _eq: true } }) {\n        id\n        isContact\n        userId\n        user: User {\n          id\n          email\n          fullName\n          meta\n          name: nameFirst\n          nameFirst\n          nameLast\n          phone\n          status\n        }\n      }\n      clientType: ClientType {\n        id\n        label: name\n        value: id\n      }\n      status\n      managerSelected: Manager {\n        id\n        label: fullName\n        value: id\n      }\n    }\n  }\n"]))),$=(0,m.Ps)(i||(i=(0,d.Z)(["\n  mutation AddCustomer($objects: [Account_insert_input!]!) {\n    insert_Account(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"]))),g=(0,m.Ps)(c||(c=(0,d.Z)(["\n  mutation UpdateCustomer(\n    $customerId: Int!\n    $customer: Account_set_input\n    $userId: Int!\n    $user: User_set_input\n    $hasUpdateUser: Boolean!\n  ) {\n    update_Account_by_pk(pk_columns: { id: $customerId }, _set: $customer) {\n      id\n    }\n    update_User_by_pk(pk_columns: { id: $userId }, _set: $user) @include(if: $hasUpdateUser) {\n      id\n    }\n  }\n"]))),f=(0,m.Ps)(o||(o=(0,d.Z)(["\n  mutation AddFinancial($objects: [Financial_insert_input!]!) {\n    insert_Financial(objects: $objects) {\n      returning {\n        id\n        accountId\n        locationId\n      }\n    }\n  }\n"]))),b=(0,m.Ps)(u||(u=(0,d.Z)(['\n  query GetFinancialJob(\n    $adminId: Int\n    $customerId: Int\n    $endDate: timestamptz\n    $startDate: timestamptz\n    $limit: Int\n    $number: String\n    $status: [String]\n    $managerId: Int\n    $locationId: Int\n    $offset: Int\n    $supplierId: Int\n    $q: String\n    $orderBy: job_financial_order_by!\n  ) {\n    jobs: getDashboard_Job_Financial(\n      limit: $limit\n      offset: $offset\n      args: {\n        adminId: $adminId\n        managerId: $managerId\n        customerId: $customerId\n        locationId: $locationId\n        supplierId: $supplierId\n        startTime: $startDate\n        endTime: $endDate\n      }\n      where: {\n        Job: {\n          type: { _eq: "reactive" }\n          _or: [\n            { description: { _ilike: $q } }\n            { reference: { _ilike: $q } }\n            { number: { _ilike: $q } }\n          ]\n          _and: [{ status: { _in: $status }, number: { _eq: $number } }]\n        }\n      }\n      order_by: [$orderBy]\n    ) {\n      customerName: customer_name\n      customerId: customer_id\n      expensesAmountCustomer: job_expenses_customer\n      expensesAmountSupplier: job_expenses_supplier\n      invoiceDate: job_date\n      invoiceNumber: job_invoicenumber\n      jobId: job_id\n      jobStatus: job_status\n      jobTotal: customer_amount\n      jobType: job_type\n      jobNumber: job_number\n      payDate: pay_date\n      priorityId: sla_id\n      revenue: job_revenue\n      service: service_name\n      serviceLine: service_name\n      serviceName: service_name\n      supplierAmount: supplier_amount\n      supplierId: supplier_id\n      supplierName: supplier_name\n      job: Job {\n        description\n        location: Location {\n          name\n        }\n        sla: SLA {\n          name\n        }\n        manager: Manager {\n          fullName\n          nameLast\n          nameFirst\n          id\n        }\n      }\n      scheduledat\n      timingStart\n      status\n      createdAt\n    }\n    meta: getDashboard_Job_Financial_aggregate(\n      args: {\n        adminId: $adminId\n        managerId: $managerId\n        customerId: $customerId\n        locationId: $locationId\n        supplierId: $supplierId\n        startTime: $startDate\n        endTime: $endDate\n      }\n      where: {\n        Job: {\n          type: { _eq: "reactive" }\n          _or: [\n            { description: { _ilike: $q } }\n            { reference: { _ilike: $q } }\n            { number: { _ilike: $q } }\n          ]\n          _and: [{ status: { _in: $status }, number: { _eq: $number } }]\n        }\n      }\n    ) {\n      aggregate {\n        totalCount: count\n      }\n    }\n  }\n'])))},23154:function(n,e,t){"use strict";t.d(e,{E:function(){return c}});var a=t(30266),r=t(64687),s=t.n(r),i=t(27834),c=function(){var n=(0,a.Z)(s().mark((function n(e,t){var a,r,c,o=arguments;return s().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=o.length>2&&void 0!==o[2]&&o[2],n.prev=1,n.next=4,e.query({query:i.WF,variables:{email:t}});case 4:if(r=n.sent,!((c=r.data.users)&&c.length>0)){n.next=8;break}return n.abrupt("return",!!a&&c[0]);case 8:return n.abrupt("return",!a||null);case 11:return n.prev=11,n.t0=n.catch(1),n.abrupt("return",!0);case 14:case"end":return n.stop()}}),n,null,[[1,11]])})));return function(e,t){return n.apply(this,arguments)}}()},27834:function(n,e,t){"use strict";t.d(e,{I4:function(){return A},AX:function(){return U},fo:function(){return h},JA:function(){return v},WF:function(){return q},Px:function(){return w},a8:function(){return Z},r1:function(){return j},MT:function(){return k},nE:function(){return L},nh:function(){return C},$E:function(){return P},uz:function(){return F},ge:function(){return S},ZA:function(){return N},tW:function(){return M}});var a,r,s,i,c,o,u,d,m,_,p,l,$,g,f,b,I=t(52209),y=t(54397),A=(0,y.Ps)(a||(a=(0,I.Z)(["\n  mutation InsertAccountUser($objects: [Account_User_insert_input!]!) {\n    insert_Account_User(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n"]))),U=(0,y.Ps)(r||(r=(0,I.Z)(["\n  mutation UpdateUser(\n    $id: Int!\n    $accountUserId: Int!\n    $accountUserChanges: Account_User_set_input\n    $changes: User_set_input\n    $updateAccountUser: Boolean!\n  ) {\n    update_Account_User_by_pk(pk_columns: { id: $accountUserId }, _set: $accountUserChanges)\n      @include(if: $updateAccountUser) {\n      id\n    }\n    update_User_by_pk(pk_columns: { id: $id }, _set: $changes) {\n      id\n    }\n  }\n"]))),h=(0,y.Ps)(s||(s=(0,I.Z)(["\n  query GetUsers(\n    $accountId: Int\n    $accountType: String\n    $date: timestamptz\n    $limit: Int\n    $offset: Int\n    $q: String\n    $orderBy: User_order_by!\n    $status: String\n  ) {\n    users: User(\n      limit: $limit\n      offset: $offset\n      where: {\n        Account_Users: { Account: { id: { _eq: $accountId }, type: { _eq: $accountType } } }\n        createdAt: { _eq: $date }\n        _or: [\n          { email: { _ilike: $q } }\n          { nameFirst: { _ilike: $q } }\n          { nameLast: { _ilike: $q } }\n        ]\n        status: { _eq: $status }\n      }\n      order_by: [$orderBy]\n    ) {\n      id\n      name: nameFirst\n      nameFirst\n      nameLast\n      phone\n      status\n      email\n      createdAt\n      meta\n      accounts: Account_Users {\n        id\n        role\n        position\n        isContact\n        status\n        account: Account {\n          id\n          name\n          type\n        }\n        userLocations: User_Account_Locations {\n          accountLocationId\n        }\n      }\n    }\n    meta: User_aggregate(\n      where: {\n        Account_Users: { Account: { id: { _eq: $accountId }, type: { _eq: $accountType } } }\n        createdAt: { _eq: $date }\n        _or: [{ nameFirst: { _ilike: $q } }, { nameLast: { _ilike: $q } }]\n        status: { _eq: $status }\n      }\n    ) {\n      aggregate {\n        totalCount: count\n      }\n    }\n  }\n"]))),v=(0,y.Ps)(i||(i=(0,I.Z)(["\n  query GetUser($id: Int!) {\n    user: User_by_pk(id: $id) {\n      id\n      fullName\n      name: nameFirst\n      nameFirst\n      nameLast\n      phone\n      status\n      email\n      createdAt\n      meta\n      media: Media {\n        id\n        medium: Medium {\n          id\n          category\n          filename\n          meta\n          type\n        }\n      }\n      accounts: Account_Users {\n        id\n        role\n        position\n        isContact\n        status\n        account: Account {\n          id\n          name\n          type\n        }\n      }\n    }\n  }\n"]))),q=(0,y.Ps)(c||(c=(0,I.Z)(["\n  query CheckDuplicateEmail($email: String!) {\n    users: User_public(where: { email: { _eq: $email } }) {\n      id\n      nameFirst\n      nameLast\n      email\n      phone\n    }\n  }\n"]))),w=(0,y.Ps)(o||(o=(0,I.Z)(["\n  fragment UserFields on User {\n    id\n    email\n    nameFirst\n    nameLast\n    fullName\n    phone\n    status\n  }\n"]))),Z=(0,y.Ps)(u||(u=(0,I.Z)(["\n  mutation SendGoogleAuthCode($code: String!, $id: Int!, $type: String!) {\n    createGoogleToken(code: $code, id: $id, type: $type) {\n      success\n      tokens\n      error\n    }\n  }\n"]))),j=(0,y.Ps)(d||(d=(0,I.Z)(["\n  mutation GenerateMSURL($type: String!, $id: Int!) {\n    genenrateMSURL(id: $id, type: $type) {\n      url\n    }\n  }\n"]))),k=(0,y.Ps)(m||(m=(0,I.Z)(["\n  mutation signoutMS($id: Int!, $type: String!, $email: String!) {\n    signoutMS(id: $id, type: $type, email: $email) {\n      error\n      msId\n      success\n    }\n  }\n"]))),L=(0,y.Ps)(_||(_=(0,I.Z)(["\n  query getAccountMeta($id: Int!) {\n    account: Account_by_pk(id: $id) {\n      meta\n    }\n  }\n"]))),C=(0,y.Ps)(p||(p=(0,I.Z)(["\n  query user($id: Int!) {\n    user: User_by_pk(id: $id) {\n      meta\n    }\n  }\n"]))),P=(0,y.Ps)(l||(l=(0,I.Z)(["\n  mutation updateAccount($accountId: Int!, $set: Account_set_input!) {\n    update_Account_by_pk(pk_columns: { id: $accountId }, _set: $set) {\n      id\n    }\n  }\n"]))),F=(0,y.Ps)($||($=(0,I.Z)(["\n  mutation updateUserMeta($userId: Int!, $meta: jsonb!) {\n    update_User_by_pk(pk_columns: { id: $userId }, _set: { meta: $meta }) {\n      id\n      meta\n    }\n  }\n"]))),S=(0,y.Ps)(g||(g=(0,I.Z)(['\n  query userDevices($accountId: Int!) {\n    users: User(\n      where: {\n        Account_Users: { accountId: { _eq: $accountId }, status: { _eq: "active" } }\n        UserDevices: { status: { _eq: "active" } }\n        status: { _eq: "active" }\n      }\n    ) {\n      id\n      fullName\n      devices: UserDevices(\n        order_by: { updatedAt: desc_nulls_last }\n        where: { status: { _eq: "active" } }\n        limit: 1\n      ) {\n        id\n        playerId\n      }\n    }\n  }\n']))),N=(0,y.Ps)(f||(f=(0,I.Z)(['\n  query GetAccountLocations($accountId: Int, $limit: Int, $offset: Int) {\n    location: Location(\n      offset: $offset\n      limit: $limit\n      where: {\n        Account_Locations: {\n          accountId: { _eq: $accountId }\n          Account: { type: { _eq: "customer" } }\n        }\n      }\n    ) {\n      id\n      name\n      accountLocations: Account_Locations {\n        id\n      }\n      addresses: Addresses(where: { entity: { _eq: "Location" }, registered: { _eq: true } }) {\n        id\n        status\n        address: Address {\n          id\n          name\n          addressLine1\n          postCode\n        }\n      }\n    }\n    meta: Location_aggregate(\n      where: {\n        Account_Locations: {\n          accountId: { _eq: $accountId }\n          Account: { type: { _eq: "customer" } }\n        }\n      }\n    ) {\n      aggregate {\n        totalCount: count\n      }\n    }\n  }\n']))),M=(0,y.Ps)(b||(b=(0,I.Z)(["\n  mutation InsertUserAccountLocations(\n    $accountUserId: Int!\n    $objects: [User_Account_Location_insert_input!]!\n  ) {\n    delete_User_Account_Location(where: { accountUserId: { _eq: $accountUserId } }) {\n      affected_rows\n    }\n    insert_User_Account_Location(objects: $objects) {\n      affected_rows\n      returning {\n        id\n      }\n    }\n  }\n"])))},20880:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return q}});var a=t(66918),r=t(92809),s=t(30266),i=t(80318),c=t(64687),o=t.n(c),u=t(67294),d=t(26075),m=t(38460),_=t(75709),p=t(53197),l=t(11163),$=t(43566),g=t(23154),f=t(94543),b=t(19501),I=function(){return(0,b.Ry)().shape({managerSelected:(0,b.Ry)().required(),name:(0,b.Z_)().required(),website:(0,b.Z_)(),companyNumber:(0,b.Z_)(),vatId:(0,b.Z_)(),status:(0,b.Z_)().oneOf(["active","inactive"]).required(),contactUseremail:(0,b.Z_)().when("contactUser",{is:"true",then:(0,b.Z_)().required()}),contactUsernameFirst:(0,b.Z_)().when("contactUser",{is:"true",then:(0,b.Z_)().required()}),contactUsernameLast:(0,b.Z_)().when("contactUser",{is:"true",then:(0,b.Z_)().required()}),contactUserphone:(0,b.Z_)().when("contactUser",{is:"true",then:(0,b.Z_)()}),contactUserstatus:(0,b.Z_)().when("contactUser",{is:"true",then:(0,b.Z_)().required()})})},y=t(85893);function A(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function U(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?A(Object(t),!0).forEach((function(e){(0,r.Z)(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):A(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var h="/dashboard/customers/",v=function(){var n=(0,d.x)(),e=(0,u.useContext)($.Z).user,t=(0,l.useRouter)().query,a=(0,m.t)(p.rM,{variables:{id:t.id}}),r=(0,i.Z)(a,2),c=r[0],b=r[1],A=b.loading,v=b.data,q=(v=void 0===v?{customer:{}}:v).customer;(0,u.useEffect)((function(){t.id&&c()}),[]);var w=(0,_.D)(p.bD,{onCompleted:function(n){var e=n.insert_Financial.returning[0].accountId;l.default.push("".concat(h,"view?id=").concat(e))}}),Z=(0,i.Z)(w,1)[0],j=(0,_.D)(p.Ve,{onCompleted:function(){var n=(0,s.Z)(o().mark((function n(e){var t;return o().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t=e.insert_Account.returning[0].id,n.next=3,Z({variables:{objects:[{accountId:t}]}});case 3:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()}),k=(0,i.Z)(j,1)[0],L=(0,_.D)(p.Wn,{onCompleted:function(n){var e=n.update_Account_by_pk.id;l.default.push("".concat(h,"view?id=").concat(e))}}),C=(0,i.Z)(L,1)[0],P=function(){var a=(0,s.Z)(o().mark((function a(r){var s,i,c;return o().wrap((function(a){for(;;)switch(a.prev=a.next){case 0:if((s={}).Customer={managerId:r.managerSelected.value,name:r.name,website:r.website||null,companyNumber:r.companyNumber||null,vatId:r.vatId||null,status:r.status,type:"customer"},r.clientType&&(s.Customer.taxonomyId_clientType=r.clientType.value),i={nameFirst:r.contactUsernameFirst,nameLast:r.contactUsernameLast,email:r.contactUseremail,phone:r.contactUserphone,status:r.contactUserstatus},!t.id){a.next=9;break}return a.next=7,C({variables:{customerId:q.id,customer:s.Customer,hasUpdateUser:!!r.contactUseruserId,userId:r.contactUseruserId,user:i}});case 7:a.next=17;break;case 9:return s.Admins={data:[{adminId:e.accountId,status:r.status}]},a.next=12,(0,g.E)(n,r.contactUseremail,!0);case 12:return c=a.sent,s.Account_Users={data:[{isContact:!0,role:"owner",status:r.contactUserstatus}]},c?s.Account_Users.data[0].userId=c.id:s.Account_Users.data[0].User={data:{nameFirst:r.contactUsernameFirst,nameLast:r.contactUsernameLast,email:r.contactUseremail,phone:r.contactUserphone,status:"active",meta:{notificationSettings:{sms:!0,email:!0,toast:!0,pushNotification:!0}}}},a.next=17,k({variables:{objects:U(U({},s.Customer),{},{Admins:s.Admins,Account_Users:s.Account_Users})}});case 17:case"end":return a.stop()}}),a)})));return function(n){return a.apply(this,arguments)}}();return(!A||!t.id)&&(0,y.jsx)(f.P,{account:q.id?q:null,id:t.id||null,onSubmit:P,schema:I,type:"customer",user:e},q?q.id:"new")},q=function(){return(0,y.jsx)(a.Z,{pageHeading:{heading:"Customers - Manage"},View:(0,y.jsx)(v,{})})}},77401:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/dashboard/customers/manage",function(){return t(20880)}])}},function(n){n.O(0,[284,4195,5312,7287,7134,3486,9082,3515,8678,5146,5998,9774,2888,179],(function(){return e=77401,n(n.s=e);var e}));var e=n.O();_N_E=e}]);